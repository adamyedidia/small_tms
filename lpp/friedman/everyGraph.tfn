input k n r num denom h1 h2 eltsInGraph hl1 hl2 eightKN eightKNRFacFac numVertices graph !0 !1 !2 

// Auto-generated code for function everyGraph

function BUILTIN_assign8 !0
function BUILTIN_assign !1 k
function BUILTIN_multiply !2 !0 !1
function BUILTIN_assign !0 n
function BUILTIN_multiply !1 !2 !0
function BUILTIN_assign eightKN !1
function BUILTIN_assign !0 eightKN
function BUILTIN_assign !1 r
function BUILTIN_multiply !2 !0 !1
function BUILTIN_assign eightKNRFacFac !2
function factorial eightKNRFacFac h1 h2 !0 !1 !2 
function BUILTIN_assign !0 h2
function BUILTIN_intneg !1 !0
function BUILTIN_assign num !1
function factorial h2 h1 eightKNRFacFac !0 !1 !2 
function empty eltsInGraph !0 
WHILE_TEST_0: function BUILTIN_assign !0 num
function BUILTIN_assign !1 h2
function BUILTIN_greaterThan !2 !1 !0
[!2] E (WHILE_STATE_0_FALSE); 1 ()
function one denom !0 
WHILE_TEST_1: function BUILTIN_assign !0 denom
function BUILTIN_assign !1 h2
function BUILTIN_greaterThan !2 !1 !0
[!2] E (WHILE_STATE_1_FALSE); 1 ()
function BUILTIN_assign !0 num
function BUILTIN_assign !1 eightKNRFacFac
function BUILTIN_multiply !2 !0 !1
function BUILTIN_assign !0 denom
function BUILTIN_divide !1 !2 !0
function BUILTIN_assign h1 !1
function appendAndIncr eltsInGraph h1 denom !0 !1 !2 
[!0] E (WHILE_TEST_1); 1 (WHILE_TEST_1)
WHILE_STATE_1_FALSE: function incr num !0 !1 !2 
[!0] E (WHILE_TEST_0); 1 (WHILE_TEST_0)
WHILE_STATE_0_FALSE: function toTheLessThanOrEqualToK eltsInGraph k hl1 hl2 h1 h2 numVertices num denom graph !0 !1 !2 
function BUILTIN_assign !0 graph
function BUILTIN_len2 !1 !0
function BUILTIN_assign numVertices !1
return
