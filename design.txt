

[variable values]__HH__[aux info, line number] [function stack] [program description] 


variable values:

[variableName1]__HE__[variableName2]__HE__...H



program:

1 = L
E = R
_ = -

"LABEL: [x] _ (L, LABEL); 1 (_, R)..."


[lineNumber]_1[varName]_1[symbolRead][symbolWritten][headMove][lineNumber]_1[symbolRead][symbolWritten][headMove][lineNumber]__[lineNumber]_1[varName]...

___[functionName]...


stack format:

[functionName]_[ID of first var]_[ID of second var]_..._[returnAddress]___[functionName]_[ID of first var]_...

1EE1E1_

HH1EE1E1__H_H1H1EE1E1_1H_HE_H...

"function f x1 x2 x3"

[lineNumber]_E[functionName]_[varName1]_[varName2]...

HH1E1E11H1EE1EH1E1H11EH1EE

"return"

[lineNumber]__...


HH1E1E1E

HH_1E1EE1 
(function name)

list of steps:

-go to function at the top of the stack
-go to line of code 
IF DIRECT COMMAND:
-read the variable name
-index the variable name into the function stack's list of variables
-go to the resulting indexed variable in the variable value zone
-read the symbol on the tape
-go to the corresponding reaction
-figure out what to write and how to move
-write and move
-set the line number to what it needs to be (+1 or GOTO)
IF FUNCTION CALL:
-for each variable in the function call, index that variable name into the function stack's list of variables
-put what you get on the stack
IF RETURN STATEMENT:
-delete all the stuff currently at the top of the stack
-set the line number to the return address



